/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DeliveryManRole;

import Business.DeliveryMan.DeliveryManDirectory;
import Business.EcoSystem;
import Business.Order.Order;
import Business.Order.OrderDirectory;

import Business.UserAccount.UserAccount;
import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author raunak
 */
public class DeliveryManWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem business;
    private UserAccount userAccount;
    private DeliveryManDirectory deliverymandirectory;
    private OrderDirectory orderdirectory;
    
    
    /**
     * Creates new form LabAssistantWorkAreaJPanel
     */
    public DeliveryManWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, EcoSystem business, DeliveryManDirectory deliveryManDirectory, OrderDirectory orderDirectory) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.business = business;
        this.orderdirectory=business.getOrderDirectory();
        this.deliverymandirectory=business.getDeliveryManDirectory();
      
        
        populateTable();
        
        populateDeliveryManTable();
    }
    
    public void populateTable(){
        
        DefaultTableModel model =(DefaultTableModel) workRequestJTable.getModel();
        model.setRowCount(0);
        for(Order ord : business.getOrderDirectory().getOrderDirectory()){
            
            if(ord.getOrderStatus() !=null && ord.getOrderStatus().equals("Order Ready for Pick up")){
                
                Object[] row=new Object[7];
                row[0]=ord;
                row[1]=ord.getMessage();
                row[2]=ord.getOrderStatus();
                row[3]=ord.getCustomer().getName();
                row[4]=ord.getCustomer().getHomeAddress();
                row[5]=ord.getRestaurant().getRestaurantName();
                row[6]=ord.getRestaurant().getAddress();
                model.addRow(row);
            
                
                
            }
        
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        assignJButton = new javax.swing.JButton();
        processJButton = new javax.swing.JButton();
        refreshJButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbldeliveryMan = new javax.swing.JTable();
        titleDeliveryMan = new javax.swing.JLabel();

        setBackground(new java.awt.Color(151, 145, 151));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ORDER-ID", "MESSAGE", "STATUS", "CUSTOMER", "CUSTOMER ADDRESS", "RESTAURANT", "RESTAURANT ADDRESS"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);
        if (workRequestJTable.getColumnModel().getColumnCount() > 0) {
            workRequestJTable.getColumnModel().getColumn(0).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(1).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(2).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(3).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 760, 96));

        assignJButton.setFont(new java.awt.Font("Tahoma", 3, 10)); // NOI18N
        assignJButton.setText("ASSIGN TO ME");
        assignJButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });
        add(assignJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 220, 110, 20));

        processJButton.setFont(new java.awt.Font("Tahoma", 3, 10)); // NOI18N
        processJButton.setText("PROCESS");
        processJButton.setBorder(new javax.swing.border.MatteBorder(null));
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });
        add(processJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 440, 80, 20));

        refreshJButton.setFont(new java.awt.Font("Tahoma", 3, 10)); // NOI18N
        refreshJButton.setText("REFRESH");
        refreshJButton.setBorder(new javax.swing.border.MatteBorder(null));
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });
        add(refreshJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 440, 70, 20));

        tbldeliveryMan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ORDER-ID", "CUSTOMER", "CUSTOMER ADDRESS", "RESTAURANT", "RESTAURANT ADDRESS", "STATUS"
            }
        ));
        jScrollPane2.setViewportView(tbldeliveryMan);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(22, 270, 740, 120));

        titleDeliveryMan.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        titleDeliveryMan.setForeground(new java.awt.Color(255, 255, 255));
        titleDeliveryMan.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleDeliveryMan.setText("DELIVERY MAN");
        add(titleDeliveryMan, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 770, -1));
    }// </editor-fold>//GEN-END:initComponents

    
    public void populateDeliveryManTable(){
        
        DefaultTableModel model=(DefaultTableModel) tbldeliveryMan.getModel();
        model.setRowCount(0);
        for(Order order : business.getOrderDirectory().getOrderDirectory()){
        if(order.getDeliveryMan()!=null && order.getDeliveryMan().equals(userAccount.getEmployee().getName())){
        
            Object[] row= new Object[6];
            row[0]=order;
            row[1]=order.getCustomer().getName();
            row[2]=order.getCustomer().getHomeAddress();
            row[3]=order.getRestaurant().getRestaurantName();
            row[4]=order.getRestaurant().getAddress();
            row[5]=order.getOrderStatus();
            model.addRow(row);
        }
        }
    
        
    }
    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed
        
        int selectedRow = tbldeliveryMan.getSelectedRow();
        
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        }
        
        //LabTestWorkRequest request = (LabTestWorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
     
        //request.setStatus("Processing");
        
        //ProcessWorkRequestJPanel processWorkRequestJPanel = new ProcessWorkRequestJPanel(userProcessContainer, request);
        //userProcessContainer.add("processWorkRequestJPanel", processWorkRequestJPanel);
        //CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        //layout.next(userProcessContainer);
        
        Order order=(Order) tbldeliveryMan.getValueAt(selectedRow, 0);
        if(order.getOrderStatus().equals("Delivered")){
        JOptionPane.showMessageDialog(null, "Already Delievered");
        return;
        }
        
        order.setOrderStatus("Delievered");
        
        JOptionPane.showMessageDialog(null, "Delivered");
        populateDeliveryManTable();
        
    }//GEN-LAST:event_processJButtonActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateTable();
        
        populateDeliveryManTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed

        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        }

        Order order = (Order)workRequestJTable.getValueAt(selectedRow, 0);
        order.setDeliveryMan(userAccount.getEmployee().getName());
        order.setOrderStatus("Order Picked Up");
        populateTable();
        populateDeliveryManTable();

    }//GEN-LAST:event_assignJButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton processJButton;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JTable tbldeliveryMan;
    private javax.swing.JLabel titleDeliveryMan;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
